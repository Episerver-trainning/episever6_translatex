//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace EPiServer.Research.Connector.Language.LionBridge.FreewayEval {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EvaluationHelperSoap", Namespace="http://tempuri.org/")]
    public partial class EvaluationHelper : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ChangeProjectStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimulateFileTranslationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileTranslationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveProjectSourceFileByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveProjectSourceFileByFilenameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EvaluationHelper() {
            this.Url = global::EPiServer.Research.Connector.Language.LionBridge.Properties.Settings.Default.EPiServer_Research_Connector_Language_LionBridge_FreewayEval_EvaluationHelper;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ChangeProjectStatusCompletedEventHandler ChangeProjectStatusCompleted;
        
        /// <remarks/>
        public event SimulateFileTranslationCompletedEventHandler SimulateFileTranslationCompleted;
        
        /// <remarks/>
        public event UploadFileTranslationCompletedEventHandler UploadFileTranslationCompleted;
        
        /// <remarks/>
        public event RetrieveProjectSourceFileByIDCompletedEventHandler RetrieveProjectSourceFileByIDCompleted;
        
        /// <remarks/>
        public event RetrieveProjectSourceFileByFilenameCompletedEventHandler RetrieveProjectSourceFileByFilenameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeProjectStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeProjectStatus(string Ticket, string ProjectID, ProjectStatusCode ProjectStatusCode) {
            object[] results = this.Invoke("ChangeProjectStatus", new object[] {
                        Ticket,
                        ProjectID,
                        ProjectStatusCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeProjectStatusAsync(string Ticket, string ProjectID, ProjectStatusCode ProjectStatusCode) {
            this.ChangeProjectStatusAsync(Ticket, ProjectID, ProjectStatusCode, null);
        }
        
        /// <remarks/>
        public void ChangeProjectStatusAsync(string Ticket, string ProjectID, ProjectStatusCode ProjectStatusCode, object userState) {
            if ((this.ChangeProjectStatusOperationCompleted == null)) {
                this.ChangeProjectStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeProjectStatusOperationCompleted);
            }
            this.InvokeAsync("ChangeProjectStatus", new object[] {
                        Ticket,
                        ProjectID,
                        ProjectStatusCode}, this.ChangeProjectStatusOperationCompleted, userState);
        }
        
        private void OnChangeProjectStatusOperationCompleted(object arg) {
            if ((this.ChangeProjectStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeProjectStatusCompleted(this, new ChangeProjectStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SimulateFileTranslation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SimulateFileTranslation(string Ticket, string ProjectID) {
            object[] results = this.Invoke("SimulateFileTranslation", new object[] {
                        Ticket,
                        ProjectID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SimulateFileTranslationAsync(string Ticket, string ProjectID) {
            this.SimulateFileTranslationAsync(Ticket, ProjectID, null);
        }
        
        /// <remarks/>
        public void SimulateFileTranslationAsync(string Ticket, string ProjectID, object userState) {
            if ((this.SimulateFileTranslationOperationCompleted == null)) {
                this.SimulateFileTranslationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimulateFileTranslationOperationCompleted);
            }
            this.InvokeAsync("SimulateFileTranslation", new object[] {
                        Ticket,
                        ProjectID}, this.SimulateFileTranslationOperationCompleted, userState);
        }
        
        private void OnSimulateFileTranslationOperationCompleted(object arg) {
            if ((this.SimulateFileTranslationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimulateFileTranslationCompleted(this, new SimulateFileTranslationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFileTranslation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadFileTranslation(string Ticket, string ProjectID, string Filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileData, string SourceLanguageID, string[] TargetLanguageIDs) {
            object[] results = this.Invoke("UploadFileTranslation", new object[] {
                        Ticket,
                        ProjectID,
                        Filename,
                        FileData,
                        SourceLanguageID,
                        TargetLanguageIDs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileTranslationAsync(string Ticket, string ProjectID, string Filename, byte[] FileData, string SourceLanguageID, string[] TargetLanguageIDs) {
            this.UploadFileTranslationAsync(Ticket, ProjectID, Filename, FileData, SourceLanguageID, TargetLanguageIDs, null);
        }
        
        /// <remarks/>
        public void UploadFileTranslationAsync(string Ticket, string ProjectID, string Filename, byte[] FileData, string SourceLanguageID, string[] TargetLanguageIDs, object userState) {
            if ((this.UploadFileTranslationOperationCompleted == null)) {
                this.UploadFileTranslationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileTranslationOperationCompleted);
            }
            this.InvokeAsync("UploadFileTranslation", new object[] {
                        Ticket,
                        ProjectID,
                        Filename,
                        FileData,
                        SourceLanguageID,
                        TargetLanguageIDs}, this.UploadFileTranslationOperationCompleted, userState);
        }
        
        private void OnUploadFileTranslationOperationCompleted(object arg) {
            if ((this.UploadFileTranslationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileTranslationCompleted(this, new UploadFileTranslationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveProjectSourceFileByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] RetrieveProjectSourceFileByID(string Ticket, string ProjectID, string FileID) {
            object[] results = this.Invoke("RetrieveProjectSourceFileByID", new object[] {
                        Ticket,
                        ProjectID,
                        FileID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveProjectSourceFileByIDAsync(string Ticket, string ProjectID, string FileID) {
            this.RetrieveProjectSourceFileByIDAsync(Ticket, ProjectID, FileID, null);
        }
        
        /// <remarks/>
        public void RetrieveProjectSourceFileByIDAsync(string Ticket, string ProjectID, string FileID, object userState) {
            if ((this.RetrieveProjectSourceFileByIDOperationCompleted == null)) {
                this.RetrieveProjectSourceFileByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveProjectSourceFileByIDOperationCompleted);
            }
            this.InvokeAsync("RetrieveProjectSourceFileByID", new object[] {
                        Ticket,
                        ProjectID,
                        FileID}, this.RetrieveProjectSourceFileByIDOperationCompleted, userState);
        }
        
        private void OnRetrieveProjectSourceFileByIDOperationCompleted(object arg) {
            if ((this.RetrieveProjectSourceFileByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveProjectSourceFileByIDCompleted(this, new RetrieveProjectSourceFileByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveProjectSourceFileByFilename", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] RetrieveProjectSourceFileByFilename(string Ticket, string ProjectID, string Filename, string SourceLanguageID, string TargetLanguageID) {
            object[] results = this.Invoke("RetrieveProjectSourceFileByFilename", new object[] {
                        Ticket,
                        ProjectID,
                        Filename,
                        SourceLanguageID,
                        TargetLanguageID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveProjectSourceFileByFilenameAsync(string Ticket, string ProjectID, string Filename, string SourceLanguageID, string TargetLanguageID) {
            this.RetrieveProjectSourceFileByFilenameAsync(Ticket, ProjectID, Filename, SourceLanguageID, TargetLanguageID, null);
        }
        
        /// <remarks/>
        public void RetrieveProjectSourceFileByFilenameAsync(string Ticket, string ProjectID, string Filename, string SourceLanguageID, string TargetLanguageID, object userState) {
            if ((this.RetrieveProjectSourceFileByFilenameOperationCompleted == null)) {
                this.RetrieveProjectSourceFileByFilenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveProjectSourceFileByFilenameOperationCompleted);
            }
            this.InvokeAsync("RetrieveProjectSourceFileByFilename", new object[] {
                        Ticket,
                        ProjectID,
                        Filename,
                        SourceLanguageID,
                        TargetLanguageID}, this.RetrieveProjectSourceFileByFilenameOperationCompleted, userState);
        }
        
        private void OnRetrieveProjectSourceFileByFilenameOperationCompleted(object arg) {
            if ((this.RetrieveProjectSourceFileByFilenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveProjectSourceFileByFilenameCompleted(this, new RetrieveProjectSourceFileByFilenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ProjectStatusCode {
        
        /// <remarks/>
        NotSpecified,
        
        /// <remarks/>
        Draft,
        
        /// <remarks/>
        Quote,
        
        /// <remarks/>
        Forecasted,
        
        /// <remarks/>
        InEvaluation,
        
        /// <remarks/>
        Cancelled,
        
        /// <remarks/>
        Booked,
        
        /// <remarks/>
        InProduction,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Closed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ChangeProjectStatusCompletedEventHandler(object sender, ChangeProjectStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeProjectStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeProjectStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SimulateFileTranslationCompletedEventHandler(object sender, SimulateFileTranslationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SimulateFileTranslationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimulateFileTranslationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadFileTranslationCompletedEventHandler(object sender, UploadFileTranslationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileTranslationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileTranslationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RetrieveProjectSourceFileByIDCompletedEventHandler(object sender, RetrieveProjectSourceFileByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveProjectSourceFileByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveProjectSourceFileByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RetrieveProjectSourceFileByFilenameCompletedEventHandler(object sender, RetrieveProjectSourceFileByFilenameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveProjectSourceFileByFilenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveProjectSourceFileByFilenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591